{
	"info": {
		"_postman_id": "d434dbd9-3a59-4c2a-bdbf-e8b8353d0ceb",
		"name": "Formation mdp app web",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29804840"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login (jwt on auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Register (create user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"123\",\r\n    \"firstName\": \"test\",\r\n    \"lastName\": \"testnom\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/auth/register",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"register"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Create a task",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Implement new feature\",\r\n    \"users\": [\"66475ab75ba282e02f84d3f9\"],\r\n    \"description\": \"Develop and integrate the new feature as per the requirements.\",\r\n    \"createdAt\": \"2024-05-17T12:34:56Z\",\r\n    \"updatedAt\": \"2024-05-17T12:34:56Z\",\r\n    \"endTask\": \"2024-06-01T00:00:00Z\",\r\n    \"status\": \"in-progress\",\r\n    \"project\": \"60d5ec49c45e8b3f4e80be61\",\r\n    \"priority\": \"high\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/task/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"task",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/task/6647560b751490aeef6a7a52",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"task",
								"6647560b751490aeef6a7a52"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tasks",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Update task",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Taks du user tEEEEEEEEEST upd\",\r\n    \"users\": [\"66475ab75ba282e02f84d3f9\"],\r\n    \"description\": \"Develop and integrate the new feature as per the requirements.\",\r\n    \"createdAt\": \"2024-05-17T12:34:56Z\",\r\n    \"updatedAt\": \"2024-05-17T12:34:56Z\",\r\n    \"endTask\": \"2024-06-01T00:00:00Z\",\r\n    \"status\": \"in-progress\",\r\n    \"project\": \"60d5ec49c45e8b3f4e80be61\",\r\n    \"priority\": \"high\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/task/66475b9d5ba282e02f84d403",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"task",
								"66475b9d5ba282e02f84d403"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete task",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/task/66475b9d5ba282e02f84d403",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"task",
								"66475b9d5ba282e02f84d403"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create user (route auth/register)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"123\",\r\n    \"firstName\": \"test\",\r\n    \"lastName\": \"testnom\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/auth/register",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"register"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create user (by id)avatar",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/diasi/Downloads/placeholder.jpg"
								}
							]
						},
						"url": {
							"raw": "localhost:3000/user/66476cc53401d2ae8afbee76",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"66476cc53401d2ae8afbee76"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by id",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get all users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/user/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"test\",\r\n    \"lastName\": \"testnom\",\r\n    \"email\": \"tazaz\",\r\n    \"password\": \"$2b$10$owWPWAOOZDJI.Qr8adBF8O5NCnV6yBMeUQOYHag1BDAjMjsLwlc8e\",\r\n    \"roles\": [\r\n        \"user\"\r\n    ],\r\n    \"_id\": \"66475ab75ba282e02f84d3f9\",\r\n    \"__v\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "66475ab75ba282e02f84d3f9",
							"host": [
								"66475ab75ba282e02f84d3f9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/user/66474be3b2d6c81e08bc73ce",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"user",
								"66474be3b2d6c81e08bc73ce"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Project",
			"item": [
				{
					"name": "Create a project",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Project de tEEEEEEEEEST\",\r\n    \"description\": \"Development of a new web application for internal use.\",\r\n    \"startDate\": \"2024-05-17T12:00:00Z\",\r\n    \"endDate\": \"2024-12-31T23:59:59Z\",\r\n    \"tasks\": [\"60d5ec49c45e8b3f4e80be5f\", \"60d5ec49c45e8b3f4e80be60\"],\r\n    \"users\": [\"60d5ec49c45e8b3f4e80be5f\", \"60d5ec49c45e8b3f4e80be61\"],\r\n    \"managers\": [\"60d5ec49c45e8b3f4e80be62\"],\r\n    \"status\": \"in-progress\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/project/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"project",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all project",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get project by id",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Update project",
					"request": {
						"method": "PUT",
						"header": []
					},
					"response": []
				},
				{
					"name": "Delete task",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/project/66475bbc5ba282e02f84d405",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"project",
								"66475bbc5ba282e02f84d405"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}